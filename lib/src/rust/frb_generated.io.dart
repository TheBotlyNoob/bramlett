// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.21.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/games.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ProgressPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgressPtr;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  Progress
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          dynamic raw);

  @protected
  Progress
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          dynamic raw);

  @protected
  Progress
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Game dco_decode_box_autoadd_game(dynamic raw);

  @protected
  Game dco_decode_game(dynamic raw);

  @protected
  GameState dco_decode_game_state(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<Game> dco_decode_list_game(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  Progress
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          SseDeserializer deserializer);

  @protected
  Progress
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          SseDeserializer deserializer);

  @protected
  Progress
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Game sse_decode_box_autoadd_game(SseDeserializer deserializer);

  @protected
  Game sse_decode_game(SseDeserializer deserializer);

  @protected
  GameState sse_decode_game_state(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<Game> sse_decode_list_game(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_AnyhowException(
      AnyhowException raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_game> cst_encode_box_autoadd_game(Game raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_game();
    cst_api_fill_to_wire_game(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_list_String(List<String> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_String(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_game> cst_encode_list_game(List<Game> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_game(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_game(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  int cst_encode_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toInt();
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_game(
      Game apiObj, ffi.Pointer<wire_cst_game> wireObj) {
    cst_api_fill_to_wire_game(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_game(Game apiObj, wire_cst_game wireObj) {
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.exe = cst_encode_String(apiObj.exe);
    wireObj.args = cst_encode_list_String(apiObj.args);
    wireObj.icon = cst_encode_String(apiObj.icon);
    wireObj.url = cst_encode_String(apiObj.url);
    wireObj.uuid = cst_encode_String(apiObj.uuid);
    wireObj.sha256 = cst_encode_String(apiObj.sha256);
    wireObj.state = cst_encode_game_state(apiObj.state);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
      Progress raw);

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
      Progress raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
      Progress raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_game_state(GameState raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          Progress self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          Progress self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          Progress self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_game(Game self, SseSerializer serializer);

  @protected
  void sse_encode_game(Game self, SseSerializer serializer);

  @protected
  void sse_encode_game_state(GameState self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_game(List<Game> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  WireSyncRust2DartDco wire_Progress_get_denominator(
    int that,
  ) {
    return _wire_Progress_get_denominator(
      that,
    );
  }

  late final _wire_Progress_get_denominatorPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function(ffi.UintPtr)>>(
          'frbgen_bramletts_games_wire_Progress_get_denominator');
  late final _wire_Progress_get_denominator = _wire_Progress_get_denominatorPtr
      .asFunction<WireSyncRust2DartDco Function(int)>();

  WireSyncRust2DartDco wire_Progress_get_numerator(
    int that,
  ) {
    return _wire_Progress_get_numerator(
      that,
    );
  }

  late final _wire_Progress_get_numeratorPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function(ffi.UintPtr)>>(
          'frbgen_bramletts_games_wire_Progress_get_numerator');
  late final _wire_Progress_get_numerator = _wire_Progress_get_numeratorPtr
      .asFunction<WireSyncRust2DartDco Function(int)>();

  WireSyncRust2DartDco wire_Progress_increment_denominator(
    int that,
  ) {
    return _wire_Progress_increment_denominator(
      that,
    );
  }

  late final _wire_Progress_increment_denominatorPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function(ffi.UintPtr)>>(
          'frbgen_bramletts_games_wire_Progress_increment_denominator');
  late final _wire_Progress_increment_denominator =
      _wire_Progress_increment_denominatorPtr
          .asFunction<WireSyncRust2DartDco Function(int)>();

  WireSyncRust2DartDco wire_Progress_increment_numerator(
    int that,
  ) {
    return _wire_Progress_increment_numerator(
      that,
    );
  }

  late final _wire_Progress_increment_numeratorPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function(ffi.UintPtr)>>(
          'frbgen_bramletts_games_wire_Progress_increment_numerator');
  late final _wire_Progress_increment_numerator =
      _wire_Progress_increment_numeratorPtr
          .asFunction<WireSyncRust2DartDco Function(int)>();

  WireSyncRust2DartDco wire_Progress_is_empty(
    int that,
  ) {
    return _wire_Progress_is_empty(
      that,
    );
  }

  late final _wire_Progress_is_emptyPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function(ffi.UintPtr)>>(
          'frbgen_bramletts_games_wire_Progress_is_empty');
  late final _wire_Progress_is_empty = _wire_Progress_is_emptyPtr
      .asFunction<WireSyncRust2DartDco Function(int)>();

  WireSyncRust2DartDco wire_Progress_is_full(
    int that,
  ) {
    return _wire_Progress_is_full(
      that,
    );
  }

  late final _wire_Progress_is_fullPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function(ffi.UintPtr)>>(
          'frbgen_bramletts_games_wire_Progress_is_full');
  late final _wire_Progress_is_full = _wire_Progress_is_fullPtr
      .asFunction<WireSyncRust2DartDco Function(int)>();

  WireSyncRust2DartDco wire_Progress_new() {
    return _wire_Progress_new();
  }

  late final _wire_Progress_newPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function()>>(
          'frbgen_bramletts_games_wire_Progress_new');
  late final _wire_Progress_new =
      _wire_Progress_newPtr.asFunction<WireSyncRust2DartDco Function()>();

  WireSyncRust2DartDco wire_Progress_set_denominator(
    int that,
    int denominator,
  ) {
    return _wire_Progress_set_denominator(
      that,
      denominator,
    );
  }

  late final _wire_Progress_set_denominatorPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.UintPtr, ffi.Uint64)>>(
      'frbgen_bramletts_games_wire_Progress_set_denominator');
  late final _wire_Progress_set_denominator = _wire_Progress_set_denominatorPtr
      .asFunction<WireSyncRust2DartDco Function(int, int)>();

  WireSyncRust2DartDco wire_Progress_set_numerator(
    int that,
    int numerator,
  ) {
    return _wire_Progress_set_numerator(
      that,
      numerator,
    );
  }

  late final _wire_Progress_set_numeratorPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.UintPtr, ffi.Uint64)>>(
      'frbgen_bramletts_games_wire_Progress_set_numerator');
  late final _wire_Progress_set_numerator = _wire_Progress_set_numeratorPtr
      .asFunction<WireSyncRust2DartDco Function(int, int)>();

  void wire_download_game(
    int port_,
    ffi.Pointer<wire_cst_game> game,
    int progress,
  ) {
    return _wire_download_game(
      port_,
      game,
      progress,
    );
  }

  late final _wire_download_gamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_game>,
              ffi.UintPtr)>>('frbgen_bramletts_games_wire_download_game');
  late final _wire_download_game = _wire_download_gamePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_game>, int)>();

  void wire_extract_zip(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> bytes,
    ffi.Pointer<wire_cst_game> game,
    int progress,
  ) {
    return _wire_extract_zip(
      port_,
      bytes,
      game,
      progress,
    );
  }

  late final _wire_extract_zipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8_loose>,
              ffi.Pointer<wire_cst_game>,
              ffi.UintPtr)>>('frbgen_bramletts_games_wire_extract_zip');
  late final _wire_extract_zip = _wire_extract_zipPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_loose>,
          ffi.Pointer<wire_cst_game>, int)>();

  void wire_fetch_games(
    int port_,
  ) {
    return _wire_fetch_games(
      port_,
    );
  }

  late final _wire_fetch_gamesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_bramletts_games_wire_fetch_games');
  late final _wire_fetch_games =
      _wire_fetch_gamesPtr.asFunction<void Function(int)>();

  void wire_init_app(
    int port_,
  ) {
    return _wire_init_app(
      port_,
    );
  }

  late final _wire_init_appPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_bramletts_games_wire_init_app');
  late final _wire_init_app =
      _wire_init_appPtr.asFunction<void Function(int)>();

  void wire_run_game(
    int port_,
    ffi.Pointer<wire_cst_game> game,
  ) {
    return _wire_run_game(
      port_,
      game,
    );
  }

  late final _wire_run_gamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_game>)>>(
      'frbgen_bramletts_games_wire_run_game');
  late final _wire_run_game = _wire_run_gamePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_game>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bramletts_games_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bramletts_games_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<wire_cst_game> cst_new_box_autoadd_game() {
    return _cst_new_box_autoadd_game();
  }

  late final _cst_new_box_autoadd_gamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_game> Function()>>(
          'frbgen_bramletts_games_cst_new_box_autoadd_game');
  late final _cst_new_box_autoadd_game = _cst_new_box_autoadd_gamePtr
      .asFunction<ffi.Pointer<wire_cst_game> Function()>();

  ffi.Pointer<wire_cst_list_String> cst_new_list_String(
    int len,
  ) {
    return _cst_new_list_String(
      len,
    );
  }

  late final _cst_new_list_StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_String> Function(
              ffi.Int32)>>('frbgen_bramletts_games_cst_new_list_String');
  late final _cst_new_list_String = _cst_new_list_StringPtr
      .asFunction<ffi.Pointer<wire_cst_list_String> Function(int)>();

  ffi.Pointer<wire_cst_list_game> cst_new_list_game(
    int len,
  ) {
    return _cst_new_list_game(
      len,
    );
  }

  late final _cst_new_list_gamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_game> Function(
              ffi.Int32)>>('frbgen_bramletts_games_cst_new_list_game');
  late final _cst_new_list_game = _cst_new_list_gamePtr
      .asFunction<ffi.Pointer<wire_cst_list_game> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(ffi.Int32)>>(
      'frbgen_bramletts_games_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose = _cst_new_list_prim_u_8_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(ffi.Int32)>>(
      'frbgen_bramletts_games_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8_strict>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_game extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> exe;

  external ffi.Pointer<wire_cst_list_String> args;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> icon;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> uuid;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> sha256;

  @ffi.Int32()
  external int state;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_game extends ffi.Struct {
  external ffi.Pointer<wire_cst_game> ptr;

  @ffi.Int32()
  external int len;
}
