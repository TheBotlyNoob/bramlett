// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.20.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

Future<Games> fetchGames({dynamic hint}) =>
    RustLib.instance.api.fetchGames(hint: hint);

(int, int) getWatcher({required FlutterWatch obj, dynamic hint}) =>
    RustLib.instance.api.getWatcher(obj: obj, hint: hint);

Future<FlutterWatch> extractZip(
        {required List<int> bytes, required Game game, dynamic hint}) =>
    RustLib.instance.api.extractZip(bytes: bytes, game: game, hint: hint);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::games::FlutterWatch>>
@sealed
class FlutterWatch extends RustOpaque {
  FlutterWatch.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  FlutterWatch.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FlutterWatch,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlutterWatch,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FlutterWatchPtr,
  );
}

class Game {
  final String name;
  final String exe;
  final String icon;
  final String url;
  final UuidValue uuid;

  const Game({
    required this.name,
    required this.exe,
    required this.icon,
    required this.url,
    required this.uuid,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      exe.hashCode ^
      icon.hashCode ^
      url.hashCode ^
      uuid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Game &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          exe == other.exe &&
          icon == other.icon &&
          url == other.url &&
          uuid == other.uuid;
}

class Games {
  final List<Game> games;

  const Games({
    required this.games,
  });

  @override
  int get hashCode => games.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Games &&
          runtimeType == other.runtimeType &&
          games == other.games;
}
