// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.21.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/games.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.21';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  int progressGetDenominator({required Progress that, dynamic hint});

  int progressGetNumerator({required Progress that, dynamic hint});

  void progressIncrementDenominator({required Progress that, dynamic hint});

  void progressIncrementNumerator({required Progress that, dynamic hint});

  bool progressIsEmpty({required Progress that, dynamic hint});

  bool progressIsFull({required Progress that, dynamic hint});

  Progress progressNew({dynamic hint});

  void progressSetDenominator(
      {required Progress that, required int denominator, dynamic hint});

  void progressSetNumerator(
      {required Progress that, required int numerator, dynamic hint});

  Future<OpaqueBytes> downloadGame(
      {required Game game, required Progress progress, dynamic hint});

  Future<void> extractZip(
      {required OpaqueBytes bytes,
      required Game game,
      required Progress progress,
      dynamic hint});

  Future<List<Game>> fetchGames({dynamic hint});

  Future<void> initApp({dynamic hint});

  Future<void> runGame({required Game game, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueBytes;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueBytes;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OpaqueBytesPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Progress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Progress;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ProgressPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  int progressGetDenominator({required Progress that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                that);
        return wire.wire_Progress_get_denominator(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kProgressGetDenominatorConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProgressGetDenominatorConstMeta => const TaskConstMeta(
        debugName: "Progress_get_denominator",
        argNames: ["that"],
      );

  @override
  int progressGetNumerator({required Progress that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                that);
        return wire.wire_Progress_get_numerator(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kProgressGetNumeratorConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProgressGetNumeratorConstMeta => const TaskConstMeta(
        debugName: "Progress_get_numerator",
        argNames: ["that"],
      );

  @override
  void progressIncrementDenominator({required Progress that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                that);
        return wire.wire_Progress_increment_denominator(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kProgressIncrementDenominatorConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProgressIncrementDenominatorConstMeta =>
      const TaskConstMeta(
        debugName: "Progress_increment_denominator",
        argNames: ["that"],
      );

  @override
  void progressIncrementNumerator({required Progress that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                that);
        return wire.wire_Progress_increment_numerator(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kProgressIncrementNumeratorConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProgressIncrementNumeratorConstMeta => const TaskConstMeta(
        debugName: "Progress_increment_numerator",
        argNames: ["that"],
      );

  @override
  bool progressIsEmpty({required Progress that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                that);
        return wire.wire_Progress_is_empty(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kProgressIsEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProgressIsEmptyConstMeta => const TaskConstMeta(
        debugName: "Progress_is_empty",
        argNames: ["that"],
      );

  @override
  bool progressIsFull({required Progress that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                that);
        return wire.wire_Progress_is_full(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kProgressIsFullConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProgressIsFullConstMeta => const TaskConstMeta(
        debugName: "Progress_is_full",
        argNames: ["that"],
      );

  @override
  Progress progressNew({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_Progress_new();
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress,
        decodeErrorData: null,
      ),
      constMeta: kProgressNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProgressNewConstMeta => const TaskConstMeta(
        debugName: "Progress_new",
        argNames: [],
      );

  @override
  void progressSetDenominator(
      {required Progress that, required int denominator, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                that);
        var arg1 = cst_encode_u_64(denominator);
        return wire.wire_Progress_set_denominator(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kProgressSetDenominatorConstMeta,
      argValues: [that, denominator],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProgressSetDenominatorConstMeta => const TaskConstMeta(
        debugName: "Progress_set_denominator",
        argNames: ["that", "denominator"],
      );

  @override
  void progressSetNumerator(
      {required Progress that, required int numerator, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                that);
        var arg1 = cst_encode_u_64(numerator);
        return wire.wire_Progress_set_numerator(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kProgressSetNumeratorConstMeta,
      argValues: [that, numerator],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kProgressSetNumeratorConstMeta => const TaskConstMeta(
        debugName: "Progress_set_numerator",
        argNames: ["that", "numerator"],
      );

  @override
  Future<OpaqueBytes> downloadGame(
      {required Game game, required Progress progress, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_game(game);
        var arg1 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                progress);
        return wire.wire_download_game(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDownloadGameConstMeta,
      argValues: [game, progress],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDownloadGameConstMeta => const TaskConstMeta(
        debugName: "download_game",
        argNames: ["game", "progress"],
      );

  @override
  Future<void> extractZip(
      {required OpaqueBytes bytes,
      required Game game,
      required Progress progress,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes(
                bytes);
        var arg1 = cst_encode_box_autoadd_game(game);
        var arg2 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
                progress);
        return wire.wire_extract_zip(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kExtractZipConstMeta,
      argValues: [bytes, game, progress],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExtractZipConstMeta => const TaskConstMeta(
        debugName: "extract_zip",
        argNames: ["bytes", "game", "progress"],
      );

  @override
  Future<List<Game>> fetchGames({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_fetch_games(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_game,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kFetchGamesConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFetchGamesConstMeta => const TaskConstMeta(
        debugName: "fetch_games",
        argNames: [],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_init_app(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> runGame({required Game game, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_game(game);
        return wire.wire_run_game(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kRunGameConstMeta,
      argValues: [game],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunGameConstMeta => const TaskConstMeta(
        debugName: "run_game",
        argNames: ["game"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueBytes => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueBytes => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Progress => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Progress => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  OpaqueBytes
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueBytes.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Progress
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Progress.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Progress
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Progress.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueBytes
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueBytes.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Progress
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Progress.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Game dco_decode_box_autoadd_game(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_game(raw);
  }

  @protected
  Game dco_decode_game(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Game(
      name: dco_decode_String(arr[0]),
      exe: dco_decode_String(arr[1]),
      args: dco_decode_list_String(arr[2]),
      icon: dco_decode_String(arr[3]),
      url: dco_decode_String(arr[4]),
      uuid: dco_decode_String(arr[5]),
      sha256: dco_decode_String(arr[6]),
      state: dco_decode_game_state(arr[7]),
    );
  }

  @protected
  GameState dco_decode_game_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GameState.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Game> dco_decode_list_game(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_game).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  OpaqueBytes
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueBytes.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Progress
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Progress.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Progress
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Progress.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueBytes
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueBytes.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Progress
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Progress.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Game sse_decode_box_autoadd_game(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_game(deserializer));
  }

  @protected
  Game sse_decode_game(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_exe = sse_decode_String(deserializer);
    var var_args = sse_decode_list_String(deserializer);
    var var_icon = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    var var_sha256 = sse_decode_String(deserializer);
    var var_state = sse_decode_game_state(deserializer);
    return Game(
        name: var_name,
        exe: var_exe,
        args: var_args,
        icon: var_icon,
        url: var_url,
        uuid: var_uuid,
        sha256: var_sha256,
        state: var_state);
  }

  @protected
  GameState sse_decode_game_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return GameState.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Game> sse_decode_list_game(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Game>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_game(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes(
      OpaqueBytes raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
      Progress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
      Progress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes(
      OpaqueBytes raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
      Progress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_game_state(GameState raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_usize(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError(
        'The type Delegate(AnyhowException) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue');
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes(
          OpaqueBytes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          Progress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          Progress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOpaqueBytes(
          OpaqueBytes self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockProgress(
          Progress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_game(Game self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_game(self, serializer);
  }

  @protected
  void sse_encode_game(Game self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.exe, serializer);
    sse_encode_list_String(self.args, serializer);
    sse_encode_String(self.icon, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.uuid, serializer);
    sse_encode_String(self.sha256, serializer);
    sse_encode_game_state(self.state, serializer);
  }

  @protected
  void sse_encode_game_state(GameState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_game(List<Game> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_game(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }
}
