import { ProceduresDef } from ".";
import * as rspc from "./bindings";

/**
 * A type which allows inferring the type of the bindings
 */
export type ProceduresLike =
  | {
      _rspc_def: ProceduresDef;
    }
  | ProceduresDef;

/**
 * This is a helper method to infer the type of bindings for this router off other rspc types.
 * The inferred type is what is generated by Rust.
 * @example
 * const rspc = createReactQueryHooks<Operations>();
 * type Bindings = inferBindingsType<typeof rspc>
 */
export type inferProcedures<TProcedures extends ProceduresLike> =
  TProcedures extends { _rspc_def: ProceduresDef }
    ? TProcedures["_rspc_def"]
    : TProcedures;

// TODO
export type inferProcedureKey<
  TProcedures extends ProceduresLike,
  TOperation extends keyof ProceduresDef
> = inferProcedures<TProcedures>[TOperation]["key"];

// TODO
export type inferProcedure<
  TProcedures extends ProceduresLike,
  TOperation extends keyof ProceduresDef,
  K extends inferProcedureKey<TProcedures, TOperation>
> = Extract<inferProcedures<TProcedures>[TOperation], { key: K }>;

// TODO
export type inferProcedureInput<
  TProcedures extends ProceduresLike,
  TOperation extends keyof ProceduresDef,
  K extends inferProcedureKey<TProcedures, TOperation>
> = inferProcedure<TProcedures, TOperation, K>["input"];

// TODO
export type inferProcedureResult<
  TProcedures extends ProceduresLike,
  TOperation extends keyof ProceduresDef,
  K extends inferProcedureKey<TProcedures, TOperation>
> = inferProcedure<TProcedures, TOperation, K>["result"];

export type inferProcedureError<
  TProcedures extends ProceduresLike,
  TOperation extends keyof ProceduresDef,
  K extends inferProcedureKey<TProcedures, TOperation>
> = inferProcedure<TProcedures, TOperation, K>["error"] | Error;

// TODO
export type _inferProcedureHandlerInput<
  TProcedures extends ProceduresLike,
  TOperation extends keyof ProceduresDef,
  K extends inferProcedures<TProcedures>[TOperation]["key"]
> = inferProcedure<TProcedures, TOperation, K>["input"] extends never
  ? []
  : [inferProcedure<TProcedures, TOperation, K>["input"]];

// TODO
export type inferQueries<TProcedures extends ProceduresLike> =
  inferProcedures<TProcedures>["queries"];

// TODO
export type inferQuery<
  TProcedures extends ProceduresLike,
  T extends inferQueries<TProcedures>["key"][0]
> = inferProcedure<inferProcedures<TProcedures>, "queries", T>;

// TODO
export type inferQueryInput<
  TProcedures extends ProceduresLike,
  T extends inferQueries<TProcedures>["key"][0]
> = inferQuery<inferProcedures<TProcedures>, T>["input"];

// TODO
export type inferQueryResult<
  TProcedures extends ProceduresLike,
  T extends inferQueries<TProcedures>["key"][0]
> = inferQuery<inferProcedures<TProcedures>, T>["result"];

// TODO
export type inferQueryError<
  TProcedures extends ProceduresLike,
  T extends inferQueries<TProcedures>["key"][0]
> = inferQuery<inferProcedures<TProcedures>, T>["error"] | rspc.Error;

// TODO
export type inferMutations<TProcedures extends ProceduresLike> =
  inferProcedures<TProcedures>["mutations"];

// TODO
export type inferMutation<
  TProcedures extends ProceduresLike,
  T extends inferMutations<TProcedures>["key"][0]
> = inferProcedure<inferProcedures<TProcedures>, "mutations", T>;

// TODO
export type inferMutationInput<
  TProcedures extends ProceduresLike,
  T extends inferMutations<TProcedures>["key"][0]
> = inferMutation<inferProcedures<TProcedures>, T>["input"];

// TODO
export type inferMutationResult<
  TProcedures extends ProceduresLike,
  T extends inferMutations<TProcedures>["key"][0]
> = inferMutation<inferProcedures<TProcedures>, T>["result"];

// TODO
export type inferMutationError<
  TProcedures extends ProceduresLike,
  T extends inferMutations<TProcedures>["key"][0]
> = inferMutation<inferProcedures<TProcedures>, T>["error"] | rspc.Error;

// TODO
export type inferSubscriptions<TProcedures extends ProceduresLike> =
  inferProcedures<TProcedures>["subscriptions"];

// TODO
export type inferSubscription<
  TProcedures extends ProceduresLike,
  T extends inferSubscriptions<TProcedures>["key"][0]
> = inferProcedure<inferProcedures<TProcedures>, "subscriptions", T>;

// TODO
export type inferSubscriptionInput<
  TProcedures extends ProceduresLike,
  T extends inferSubscriptions<TProcedures>["key"][0]
> = inferSubscription<inferProcedures<TProcedures>, T>["input"];

// TODO
export type inferSubscriptionResult<
  TProcedures extends ProceduresLike,
  T extends inferSubscriptions<TProcedures>["key"][0]
> = inferSubscription<inferProcedures<TProcedures>, T>["result"];

// TODO
export type inferSubscriptionError<
  TProcedures extends ProceduresLike,
  T extends inferSubscriptions<TProcedures>["key"][0]
> = inferSubscription<inferProcedures<TProcedures>, T>["result"] | rspc.Error;

// TODO

export type inferInfiniteQueries<TProcedures extends ProceduresLike> = Exclude<
  Extract<inferProcedures<TProcedures>["queries"], { input: { cursor: any } }>,
  { input: never }
>;

// TODO
export type inferInfiniteQuery<
  TProcedures extends ProceduresLike,
  K extends inferInfiniteQueries<TProcedures>["key"]
> = Extract<inferInfiniteQueries<TProcedures>, { key: K }>;

// TODO
type EmptyObjToNever<T> = keyof T extends never ? never : T;
export type inferInfiniteQueryInput<
  TProcedures extends ProceduresLike,
  K extends inferInfiniteQueries<TProcedures>["key"]
> = EmptyObjToNever<
  Omit<inferInfiniteQuery<TProcedures, K>["input"], "cursor">
>;

// TODO
export type inferInfiniteQueryResult<
  TProcedures extends ProceduresLike,
  K extends inferInfiniteQueries<TProcedures>["key"]
> = inferInfiniteQuery<TProcedures, K>["result"];

// TODO
export type inferInfiniteQueryError<
  TProcedures extends ProceduresLike,
  K extends inferInfiniteQueries<TProcedures>["key"]
> = inferInfiniteQuery<TProcedures, K>["error"];

// TODO
export type _inferInfiniteQueryProcedureHandlerInput<
  TProcedures extends ProceduresLike,
  K extends inferInfiniteQueries<TProcedures>["key"]
> = inferInfiniteQueryInput<TProcedures, K> extends never
  ? []
  : [inferInfiniteQueryInput<TProcedures, K>];

// TODO: Extracting subset of operations by name or some shared key
